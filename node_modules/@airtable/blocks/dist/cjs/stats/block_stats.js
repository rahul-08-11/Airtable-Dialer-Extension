"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockStats = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _airtable_interface = _interopRequireDefault(require("../injected/airtable_interface"));

// NOTE(richsinn): this client is effectively an implementation of the StatsClient interface
// for Datadog. For example, see https://github.com/Hyperbase/hyperbase/blob/development/client_server_shared/stats/stats_client.tsx

/** @hidden */
var BlockStats =
/*#__PURE__*/
function () {
  function BlockStats() {
    (0, _classCallCheck2.default)(this, BlockStats);
  }

  (0, _createClass2.default)(BlockStats, [{
    key: "increment",
    value: function increment(stat, tags) {
      this.incrementBy(stat, 1, tags);
    }
  }, {
    key: "incrementBy",
    value: function incrementBy(stat, value, tags) {
      (0, _airtable_interface.default)().sendStat({
        metricType: 'incrementBy',
        stat,
        value,
        tags
      });
    }
  }, {
    key: "decrement",
    value: function decrement(stat, tags) {
      this.decrementBy(stat, 1, tags);
    }
  }, {
    key: "decrementBy",
    value: function decrementBy(stat, value, tags) {
      (0, _airtable_interface.default)().sendStat({
        metricType: 'decrementBy',
        stat,
        value,
        tags
      });
    }
  }, {
    key: "gauge",
    value: function gauge(stat, value, tags) {
      (0, _airtable_interface.default)().sendStat({
        metricType: 'gauge',
        stat,
        value,
        tags
      });
    }
  }, {
    key: "histogram",
    value: function histogram(stat, value, tags) {
      (0, _airtable_interface.default)().sendStat({
        metricType: 'histogram',
        stat,
        value,
        tags
      });
    }
  }, {
    key: "distribution",
    value: function distribution(stat, value, tags) {
      (0, _airtable_interface.default)().sendStat({
        metricType: 'distribution',
        stat,
        value,
        tags
      });
    }
  }, {
    key: "timing",
    value: function timing(stat, time, tags) {
      (0, _airtable_interface.default)().sendStat({
        metricType: 'timing',
        stat,
        value: time,
        tags
      });
    }
  }, {
    key: "timingWithSum",
    value: function timingWithSum(stat, time, tags) {
      this.timing(stat, time, tags);
      this.incrementBy(stat + '.sum', time, tags);
    }
  }]);
  return BlockStats;
}();

var blockStats = new BlockStats();
exports.blockStats = blockStats;