"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useGlobalConfig;

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

var _sdk_context = require("./sdk_context");

/** @module @airtable/blocks/ui: useGlobalConfig */

/** */

/**
 * Returns the app's {@link GlobalConfig} and updates whenever any key in {@link GlobalConfig}
 * changes.
 *
 * @example
 * ```js
 * import {Button, useGlobalConfig} from '@airtable/blocks/ui';
 *
 * function SyncedCounter() {
 *     const globalConfig = useGlobalConfig();
 *     const count = globalConfig.get('count');
 *
 *     const increment = () => globalConfig.setAsync('count', count + 1);
 *     const decrement = () => globalConfig.setAsync('count', count - 1);
 *     const isEnabled = globalConfig.hasPermissionToSet('count');
 *
 *     return (
 *         <React.Fragment>
 *             <Button icon="minus" onClick={decrement} disabled={!isEnabled} ariaLabel="decrease"/>
 *             {count}
 *             <Button icon="plus" onClick={increment} disabled={!isEnabled} airaLabel="increase"/>
 *         </React.Fragment>
 *     );
 * }
 * ```
 * @docsPath UI/hooks/useGlobalConfig
 * @hook
 */
function useGlobalConfig() {
  var _useSdk = (0, _sdk_context.useSdk)(),
      globalConfig = _useSdk.globalConfig,
      session = _useSdk.session;

  (0, _use_watchable.default)(session, ['permissionLevel']);
  (0, _use_watchable.default)(globalConfig, ['*']);
  return globalConfig;
}