"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSynced;

var _global_config_synced_component_helpers = _interopRequireDefault(require("./global_config_synced_component_helpers"));

var _sdk_context = require("./sdk_context");

/**
 * A hook for syncing a component to {@link GlobalConfig}.
 * Useful if you are dealing with a custom input component and canâ€˜t use one of our `Synced` components.
 *
 * @param globalConfigKey
 * @example
 * ```js
 * import {useBase, useSynced} from '@airtable/blocks/ui';
 *
 * function CustomInputSynced() {
 *    const [value, setValue, canSetValue] = useSynced('myGlobalConfigKey');
 *
 *     return (
 *         <input
 *              type="text"
 *              value={value}
 *              onChange={e => setValue(e.target.value)}
 *              disabled={!canSetValue}
 *          />
 *     );
 * }
 * ```
 * @docsPath UI/hooks/useSynced
 * @hook
 */
function useSynced(globalConfigKey) {
  _global_config_synced_component_helpers.default.useDefaultWatchesForSyncedComponent(globalConfigKey);

  var sdk = (0, _sdk_context.useSdk)();
  var globalConfig = sdk.globalConfig;
  var value = globalConfig.get(globalConfigKey);
  var canSetValue = globalConfig.hasPermissionToSet(globalConfigKey);

  function setValue(newValue) {
    sdk.globalConfig.setAsync(globalConfigKey, newValue);
  }

  return [value, setValue, canSetValue];
}