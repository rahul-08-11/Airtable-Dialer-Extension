"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.concat");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error_utils = require("../error_utils");

var _watchable = _interopRequireDefault(require("../watchable"));

/** @module @airtable/blocks/models: Abstract models */

/** */

/**
 * Abstract superclass for all models. You won't use this class directly.
 *
 * @docsPath models/advanced/AbstractModel
 */
var AbstractModel =
/*#__PURE__*/
function (_Watchable) {
  (0, _inherits2.default)(AbstractModel, _Watchable);
  (0, _createClass2.default)(AbstractModel, null, [{
    key: "_isWatchableKey",

    /** @internal */

    /**
     * This method is essentially abstract, but as of this writing, TypeScript
     * does not support abstract static methods. This necessitates a concrete
     * implementation which must be explicitly ignored by the test coverage
     * tooling.
     *
     * @internal
     */
    // istanbul ignore next
    value: function _isWatchableKey(key) {
      // Override to return whether `key` is a valid watchable key.
      return false;
    }
    /** @internal */

  }]);

  /**
   * @internal
   */
  function AbstractModel(sdk, modelId) {
    var _this;

    (0, _classCallCheck2.default)(this, AbstractModel);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AbstractModel).call(this));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_baseData", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_id", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_sdk", void 0);
    (0, _error_utils.invariant)(typeof modelId === 'string', '%s id should be a string', _this.constructor._className);
    _this._sdk = sdk;
    _this._baseData = sdk.__airtableInterface.sdkInitData.baseData;
    _this._id = modelId;
    return _this;
  }
  /**
   * The ID for this model.
   */


  (0, _createClass2.default)(AbstractModel, [{
    key: "_spawnErrorForDeletion",

    /**
     * @internal
     */
    value: function _spawnErrorForDeletion() {
      return (0, _error_utils.spawnError)('%s has been deleted', this.constructor._className);
    }
    /**
     * A string representation of the model for use in debugging.
     */

  }, {
    key: "toString",
    value: function toString() {
      return "[".concat(this.constructor._className, " ").concat(this.id, "]");
    }
  }, {
    key: "id",
    get: function get() {
      return this._id;
    }
    /**
     * @internal
     */

  }, {
    key: "_data",

    /**
     * @internal
     */
    get: function get() {
      var data = this._dataOrNullIfDeleted;

      if (data === null) {
        throw this._spawnErrorForDeletion();
      }

      return data;
    }
    /**
     * `true` if the model has been deleted, and `false` otherwise.
     *
     * In general, it's best to avoid keeping a reference to an object past the
     * current event loop, since it may be deleted and trying to access any data
     * of a deleted object (other than its ID) will throw. But if you keep a
     * reference, you can use `isDeleted` to check that it's safe to access the
     * model's data.
     */

  }, {
    key: "isDeleted",
    get: function get() {
      return this._dataOrNullIfDeleted === null;
    }
  }]);
  return AbstractModel;
}(_watchable.default);

(0, _defineProperty2.default)(AbstractModel, "_className", 'AbstractModel');
var _default = AbstractModel;
exports.default = _default;