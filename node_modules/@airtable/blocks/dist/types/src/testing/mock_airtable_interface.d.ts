import { Aggregators, AirtableInterface, AppInterface, FieldTypeProvider, SdkInitData, UrlConstructor, GlobalConfigHelpers, PartialViewData, IdGenerator, VisList } from '../types/airtable_interface';
import { FieldData, FieldId } from '../types/field';
import { ModelChange } from '../types/base';
import { RecordData } from '../types/record';
import { TableId } from '../types/table';
import { ViewId } from '../types/view';
import { ViewportSizeConstraint } from '../types/viewport';
import { Mutation, PermissionCheckResult } from '../types/mutations';
import { NormalizedSortConfig } from '../models/record_query_result';
import { RequestJson, ResponseJson } from '../types/backend_fetch_types';
import { CursorData } from '../types/cursor';
import { RecordActionData } from '../types/record_action_data';
declare const EventEmitter: any;
/** @hidden */
declare abstract class MockAirtableInterface extends EventEmitter implements AirtableInterface {
    sdkInitData: SdkInitData;
    private _initData;
    constructor(initData: SdkInitData);
    /**
     * Revert the mock interface to its initial state. This includes:
     *
     * - removing all event listeners
     * - restoring the database schema
     */
    reset(): void;
    get aggregators(): Aggregators;
    get fieldTypeProvider(): FieldTypeProvider;
    get urlConstructor(): UrlConstructor;
    get globalConfigHelpers(): GlobalConfigHelpers;
    get idGenerator(): IdGenerator;
    assertAllowedSdkPackageVersion(): void;
    applyMutationAsync(mutation: Mutation, opts?: {
        holdForMs?: number;
    }): Promise<void>;
    checkPermissionsForMutation(mutation: Mutation): PermissionCheckResult;
    createVisList(appInterface: AppInterface, recordDatas: Array<RecordData>, fieldDatas: Array<FieldData>, sorts: Array<NormalizedSortConfig>): VisList;
    subscribeToModelUpdates(fn: Function): void;
    setActiveViewOrTable(tableId: TableId, viewId: ViewId): void;
    subscribeToGlobalConfigUpdates(): void;
    subscribeToSettingsButtonClick(): void;
    subscribeToEnterFullScreen(): void;
    subscribeToExitFullScreen(): void;
    subscribeToFocus(): void;
    abstract fetchAndSubscribeToCellValuesInFieldsAsync(tableId: TableId, fieldIds: Array<FieldId>): Promise<any>;
    abstract fetchAndSubscribeToCursorDataAsync(): Promise<CursorData>;
    abstract fetchAndSubscribeToTableDataAsync(tableId: string): Promise<{
        recordsById: {
            [recordId: string]: RecordData;
        };
    }>;
    abstract fetchAndSubscribeToViewDataAsync(tableId: string, viewId: string): Promise<PartialViewData>;
    abstract fetchDefaultCellValuesByFieldIdAsync(): Promise<{
        [key: string]: unknown;
    }>;
    triggerModelUpdates(changes: ReadonlyArray<ModelChange>): void;
    triggerGlobalConfigUpdates(): void;
    triggerSettingsButtonClick(): void;
    triggerEnterFullScreen(): void;
    triggerExitFullScreen(): void;
    triggerFocus(): void;
    unsubscribeFromCursorData(): void;
    unsubscribeFromTableData(): void;
    unsubscribeFromCellValuesInFields(): void;
    unsubscribeFromViewData(): void;
    abstract expandRecord(tableId: string, recordId: string, recordIds: Array<string> | null): void;
    abstract expandRecordList(tableId: string, recordIds: Array<string>, fieldIds: Array<string> | null): void;
    abstract expandRecordPickerAsync(tableId: string, recordIds: Array<string>, fieldIds: Array<string> | null, shouldAllowCreatingRecord: boolean): Promise<string | null>;
    abstract reloadFrame(): void;
    abstract setSettingsButtonVisibility(): void;
    abstract setUndoRedoMode(): void;
    abstract setFullscreenMaxSize(maxFullscreenSize: ViewportSizeConstraint): void;
    abstract enterFullscreen(): void;
    abstract exitFullscreen(): void;
    abstract fetchAndSubscribeToPerformRecordActionAsync(): Promise<RecordActionData | null>;
    abstract trackEvent(): void;
    abstract trackExposure(): void;
    abstract sendStat(): void;
    abstract performBackendFetchAsync(requestJson: RequestJson): Promise<ResponseJson>;
}
export default MockAirtableInterface;
//# sourceMappingURL=mock_airtable_interface.d.ts.map