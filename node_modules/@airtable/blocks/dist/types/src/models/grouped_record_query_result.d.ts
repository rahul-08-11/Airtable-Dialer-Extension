/** @module @airtable/blocks/models: RecordQueryResult */ /** */
import { FieldId } from '../types/field';
import { FlowAnyFunction, FlowAnyObject } from '../private_utils';
import { RecordId } from '../types/record';
import { GroupData } from '../types/view';
import { NormalizedGroupLevel } from '../types/airtable_interface';
import RecordQueryResult, { WatchableRecordQueryResultKey } from './record_query_result';
import Field from './field';
/** @hidden */
interface GroupedRecordQueryResultData {
    groupData: GroupData;
    groupLevels: Array<NormalizedGroupLevel>;
}
/**
 * Represents a group of records returned from a group query. See {@link RecordQueryResult} for main
 * documentation.
 *
 * Do not instantiate. You can get instances of this class by calling
 * `recordQueryResult.groups`.
 *
 * @docsPath models/query results/GroupedRecordQueryResult
 * @hidden
 */
declare class GroupedRecordQueryResult extends RecordQueryResult<GroupedRecordQueryResultData> {
    _orderedRecordIds: Array<RecordId> | null;
    /**
     * Gets children groups of this group (if any exist)
     */
    get groups(): Array<GroupedRecordQueryResult> | null;
    /**
     * Gets the fieldId that this group is grouped by
     */
    get fieldId(): FieldId;
    /**
     * Gets the field that this group is grouped by
     */
    get field(): Field;
    /**
     * Ordered array of all the record ids inside this group, in group order.
     * This returns all recordIds of all children groups (in grouped order).
     * Watchable.
     */
    get recordIds(): Array<RecordId>;
    /**
     * The fields that were used to create the parent RecordQueryResult that created this GroupedRecordQueryResult.
     * This is separate from the field/fieldId property - which is the field this grouping is based upon.
     * Null if fields were not specified, which means the RecordQueryResult
     * will load all fields in the table.
     */
    get fields(): Array<Field> | null;
    /** @inheritdoc */
    watch(keys: WatchableRecordQueryResultKey | ReadonlyArray<WatchableRecordQueryResultKey>, callback: FlowAnyFunction, context?: FlowAnyObject | null): Array<WatchableRecordQueryResultKey>;
    /** @inheritdoc */
    unwatch(keys: WatchableRecordQueryResultKey | ReadonlyArray<WatchableRecordQueryResultKey>, callback: FlowAnyFunction, context?: FlowAnyObject | null): Array<WatchableRecordQueryResultKey>;
    /** @inheritdoc */
    loadDataAsync(): Promise<void>;
    /** @inheritdoc */
    get isDataLoaded(): boolean;
}
export default GroupedRecordQueryResult;
//# sourceMappingURL=grouped_record_query_result.d.ts.map