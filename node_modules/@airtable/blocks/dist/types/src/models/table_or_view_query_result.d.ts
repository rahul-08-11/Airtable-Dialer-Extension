import { FlowAnyObject, FlowAnyFunction } from '../private_utils';
import { NormalizedGroupLevel } from '../types/airtable_interface';
import RecordQueryResult, { WatchableRecordQueryResultKey } from './record_query_result';
import Field from './field';
import GroupedRecordQueryResult from './grouped_record_query_result';
import { GroupLevels } from './view_metadata_query_result';
/** @hidden */
interface TableOrViewQueryResultData {
    recordIds: Array<string> | null;
    groups: Array<GroupedRecordQueryResult> | null;
    groupLevels: Array<NormalizedGroupLevel> | null;
}
/**
 * Represents a set of records directly from a view or table. See {@link RecordQueryResult} for main
 * documentation.
 *
 * Do not instantiate. You can get instances of this class by calling
 * `table.selectRecords` or `view.selectRecords`.
 *
 * @docsPath models/query results/TableOrViewQueryResult
 */
declare class TableOrViewQueryResult extends RecordQueryResult<TableOrViewQueryResultData> {
    /**
     * The record IDs in this RecordQueryResult.
     * Throws if data is not loaded yet.
     * Can be watched.
     */
    get recordIds(): Array<string>;
    /**
     * The ordered GroupedRecordQueryResult's in this RecordQueryResult.
     * Throws if data is not loaded yet.
     * Can be watched.
     *
     * @hidden
     */
    get groups(): Array<GroupedRecordQueryResult> | null;
    /**
     * The GroupLevels in this RecordQueryResult.
     * Throws if data is not loaded yet.
     * Can be watched.
     *
     * @hidden
     */
    get groupLevels(): GroupLevels | null;
    /**
     * The fields that were used to create this RecordQueryResult.
     * Null if fields were not specified, which means the RecordQueryResult
     * will load all fields in the table.
     */
    get fields(): Array<Field> | null;
    /** @inheritdoc */
    watch(keys: WatchableRecordQueryResultKey | ReadonlyArray<WatchableRecordQueryResultKey>, callback: FlowAnyFunction, context?: FlowAnyObject | null): Array<WatchableRecordQueryResultKey>;
    /** @inheritdoc */
    unwatch(keys: WatchableRecordQueryResultKey | ReadonlyArray<WatchableRecordQueryResultKey>, callback: FlowAnyFunction, context?: FlowAnyObject | null): Array<WatchableRecordQueryResultKey>;
    /** @inheritdoc */
    loadDataAsync(): Promise<void>;
    /** @inheritdoc */
    unloadData(): void;
}
export default TableOrViewQueryResult;
//# sourceMappingURL=table_or_view_query_result.d.ts.map