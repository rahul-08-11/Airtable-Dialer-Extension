/// <reference types="jest" />
import { Aggregators, FieldTypeProvider, UrlConstructor, GlobalConfigHelpers, IdGenerator, VisList, PartialViewData } from '../../src/types/airtable_interface';
import MockAirtableInterface from '../../src/testing/mock_airtable_interface';
import { TableId } from '../../src/types/table';
import { FieldId } from '../../src/types/field';
import { CursorData } from '../../src/types/cursor';
import { RecordData } from '../../src/types/record';
import { RecordActionData } from '../../src/types/record_action_data';
import { RequestJson, ResponseJson } from '../../src/types/backend_fetch_types';
/**
 * An implementation of the MockAirtableInterface designed for use in the
 * Blocks SDK internal automated test suite. Provides Jest spies for all
 * available methods (and which resets the state of those spies with every call
 * to `reset`).
 */
declare class MockAirtableInterfaceInternal extends MockAirtableInterface {
    static projectTrackerExample(): jest.Mocked<MockAirtableInterfaceInternal>;
    static linkedRecordsExample(): jest.Mocked<MockAirtableInterfaceInternal>;
    get aggregators(): jest.Mocked<Aggregators>;
    get fieldTypeProvider(): jest.Mocked<FieldTypeProvider>;
    get urlConstructor(): jest.Mocked<UrlConstructor>;
    get globalConfigHelpers(): jest.Mocked<GlobalConfigHelpers>;
    get idGenerator(): jest.Mocked<IdGenerator>;
    /**
     * Revert the mock interface to its initial state. This includes:
     *
     * - removing all event listeners
     * - restoring the database schema
     * - recreating the Jest "spies" for every instance method
     */
    reset(): void;
    createVisList(...args: Parameters<MockAirtableInterface['createVisList']>): jest.Mocked<VisList>;
    fetchAndSubscribeToCellValuesInFieldsAsync(tableId: TableId, fieldIds: Array<FieldId>): Promise<any>;
    fetchAndSubscribeToCursorDataAsync(): Promise<CursorData>;
    fetchAndSubscribeToTableDataAsync(tableId: string): Promise<{
        recordsById: {
            [recordId: string]: RecordData;
        };
    }>;
    fetchAndSubscribeToViewDataAsync(tableId: string, viewId: string): Promise<PartialViewData>;
    fetchDefaultCellValuesByFieldIdAsync(): Promise<{
        [key: string]: unknown;
    }>;
    expandRecord(tableId: string, recordId: string, recordIds: Array<string> | null): void;
    expandRecordList(): void;
    expandRecordPickerAsync(): Promise<string | null>;
    reloadFrame(): void;
    setSettingsButtonVisibility(): void;
    setUndoRedoMode(): void;
    setFullscreenMaxSize(): void;
    enterFullscreen(): void;
    exitFullscreen(): void;
    fetchAndSubscribeToPerformRecordActionAsync(): Promise<RecordActionData | null>;
    trackEvent(): void;
    trackExposure(): void;
    sendStat(): void;
    performBackendFetchAsync(requestJson: RequestJson): Promise<ResponseJson>;
}
export default MockAirtableInterfaceInternal;
//# sourceMappingURL=mock_airtable_interface_internal.d.ts.map